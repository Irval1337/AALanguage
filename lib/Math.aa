double M_INF = 2147483647;
double M_PI = 3.14159265358979323846;
double M_E = 2.71828182845904523536;

double pow(double x, long n) {
    if (n == 0) return 1;
    if (n % 2 == 1) return x * pow(x, n - 1);
    double val = pow(x, n / 2);
    return val * val;
}

double sqr(double x) {
    return x * x;
}

double sqrt(double x) {
    double L = 0, R = x, M;
    for(int iters = 0; iters < 100; ++iters) {
        M = L + (R - L) / 2;
        if (M * M > x) R = M;
        else L = M;
    }
    return L;
}

double cbrt(double x) {
    double L = 0, R = x, M;
    for(int iters = 0; iters < 100; ++iters) {
        M = L + (R - L) / 2;
        if (M * M * M > x) R = M;
        else L = M;
    }
    return L;
}

double abs(double x) {
    if (x < 0) return -x;
    return x;
}

int floor(double x) {
    if (x >= 0)
        return x;
    int floored = x;
    if (floored == x) return x;
    return floored - 1;
}

int ceil(double x) {
    int floored = x;
    if (x >= 0) {
        if (floored < x) return x + 1;
        return floored;
    }
    return x;
}

int round(double x) {
    int floored = x;
    if (x >= 0) {
        if (x - floored >= 0.5)
            return floored + 1;
        return floored;
    } else {
        if (1 - (floored - x) >= 0.5)
            return floored;
        return floored - 1; 
    }
}

int trunc(double x) {
    return x;
}

int bitfloor(double x) {
    long curr = 1;
    int ans = 0;
    while (curr * 2 <= x) {
        ++ans;
        curr *= 2;
    }
    return ans;
}

int bitceil(double x) {
    long curr = 1;
    int ans = 0;
    while (curr < x) {
        ++ans;
        curr *= 2;
    }
    return ans;
}

int sign(double x) {
    if (x == 0) return 0;
    if (x > 0) return 1;
    return -1;
}

double max(double a, double b) {
    if (a > b) return a;
    return b;
}

double min(double a, double b) {
    if (a < b) return a;
    return b;
}

double clamp(double x, double mn, double mx) {
    if (x > mx) return mx;
    if (x < mn) return mn;
    return x;
}
